ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
final_table <- filter(sample_table, accession !%in% ers_to_delete$x)
final_table <- filter(sample_table, accession %in% ers_to_delete$x)
ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
final_table <- filter(sample_table, accession %in% ers_to_delete$)
ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
final_table <- filter(sample_table, accession %in% ers_to_delete)
final_table
#also remove using dups (generated above)
library(tidyverse)
setwd("/home/vgartner/wray-lab/joint-call/singletons/")
#original data files - masked regiosn not removed
by_pop_singletons <- as.data.frame(read.csv("by-pop-chroms-snps-only.tsv", sep = "\t"))
combined_singletons <- as.data.frame(read.csv("combined-chroms-snps-only.tsv", sep = "\t"))
#trimmed data files - telomeres & repetitive regions removed
#by_pop_singletons <- as.data.frame(read.csv("trimmed-by-pop-chroms-snps-only.singletons.csv", sep = ","))
#combined_singletons <- as.data.frame(read.csv("trimmed-combined-chroms-snps-only.singletons.csv", sep = ","))
names(by_pop_singletons)[5] <- "acc"
names(combined_singletons)[5] <- "acc"
#combined_singletons
ethiopia_acc <- c("ERR2678989", "ERR2678996", "ERR2678998", "ERR2679003", "ERR775189", "ERR775190", "ERR925409", "ERR925410", "ERR925431", "ERR925440")
cambodia_acc <- c("SRR2315729", "SRR2315958", "SRR2316038", "SRR2316105", "SRR2316531", "SRR2316875", "SRR6361608", "SRR6361755", "SRR6361801", "SRR6361805")
ethiopia_col <- rep(c("Ethiopia"), times = 10)
cambodia_col <- rep(c("Cambodia"), times = 10)
eth_df <- data.frame(ethiopia_acc, ethiopia_col)
names(eth_df)[1] <- "acc"
names(eth_df)[2] <- "location"
cam_df <- data.frame(cambodia_acc, cambodia_col)
names(cam_df)[1] <- "acc"
names(cam_df)[2] <- "location"
loc_df <- rbind(eth_df, cam_df)
#loc_df
bp_count <- nrow(by_pop_singletons)
c_count <- nrow(combined_singletons)
total_count <- data.frame(condition = c("by-population", "combined"), total = c(bp_count, c_count))
#total_count
total_count_plot <- ggplot(total_count, aes(x=factor(condition), y=total, fill=condition)) +
geom_bar(stat="identity") +
theme(legend.position = "none") +
geom_text(aes(label=total), position=position_dodge(width=0.9), check_overlap = TRUE, vjust = -.3, size = 4) +
labs(x = "Joint Calling Condition", y = "Number of singletons", title = "Number of singletons per condition")
total_count_plot
by_pop_sing_per_indv <- count(by_pop_singletons, acc)
# double check
#sum(by_pop_sing_per_indv$n) == nrow(by_pop_singletons)
names(by_pop_sing_per_indv)[1] <- "acc"
by_pop_sing_per_indv <- inner_join(by_pop_sing_per_indv, loc_df, by="acc")
#by_pop_sing_per_indv
#make sure n == total number of singletons
#sum(by_pop_sing_per_indv$n) #209190
bp_sing_indv_plot <- ggplot(as.data.frame(by_pop_sing_per_indv), aes(x=factor(acc), y=n, fill=location)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
labs(x = "Sample Accession", y = "Number of singletons", title = "Number of singletons per individual in 'By-Population' condition") +
scale_color_manual(values = colors, breaks = names(colors)[c(2,1)]) +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust = -.3, size = 3)
bp_sing_indv_plot
########
combined_sing_per_indv <- count(combined_singletons, acc)
# double check
#sum(combined_sing_per_indv$n) == nrow(combined_singletons)
combined_sing_per_indv <- inner_join(combined_sing_per_indv, loc_df, by="acc")
#combined_sing_per_indv
comb_sing_indv_plot <- ggplot(as.data.frame(combined_sing_per_indv), aes(x=factor(acc), y=n, fill=location)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
labs(x = "Sample Accession", y = "Number of singletons", title = "Number of singletons per individual in 'Combined' condition") +
scale_color_manual(values = colors, breaks = names(colors)[c(2,1)])+
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust = -.3, size = 3)
comb_sing_indv_plot
#pull out rows that come from the apicoplast
by_pop_api <- filter(by_pop_singletons, CHROM == "LT635626")
combined_api <- filter(combined_singletons, CHROM == "LT635626")
#by_pop_api
bp_api_count <- nrow(by_pop_api)
c_api_count <- nrow(combined_api)
api_total_count <- data.frame(condition = c("by-pop", "combined"), total = c(bp_api_count, c_api_count))
api_total_count_plot <- ggplot(api_total_count, aes(x=factor(condition), y=total, fill=condition)) +
geom_bar(stat="identity") +
theme(legend.position = "none") +
geom_text(aes(label=total), position=position_dodge(width=0.9), check_overlap = TRUE, vjust = -.3, size = 4) +
labs(x = "Joint Calling Condition", y = "Number of singletons", title = "Number of Apicoplast singletons per condition")
api_total_count_plot
common_singletons <- inner_join(by_pop_singletons, combined_singletons, by=c("CHROM", "POS"))
#new dataframe with condition as a column
by_pop_singletons$condition = c(rep("By Population", length(nrow(by_pop_singletons))))
#by_pop_singletons
combined_singletons$condition = c(rep("Combined", length(nrow(combined_singletons))))
#combined_singletons
joined_singletons <- rbind(by_pop_singletons, combined_singletons)
# making sure I have what I want
#test <- joined_singletons %>% filter(condition == "Combined")
#test2 <- joined_singletons %>% filter(condition == "By Population")
#nrow(test) + nrow(test2) == nrow(joined_singletons)
# plot nuclear chroms separate from organelle (very diff bin widths needed)
#nuclear
nuclear_singletons <- filter(joined_singletons, CHROM != "LT635626" & CHROM != "LT635627")
#make sure only nuclear chroms are in new df
#nuclear_singletons_count <- count(nuclear_singletons, CHROM)
#nuclear_singletons_count
nuc_snp_density_plot <- ggplot(nuclear_singletons) +
geom_histogram(aes(x=POS, fill=condition), binwidth = 10000) +
facet_wrap( ~ CHROM, ncol = 2, scales = "free") +
labs(x = "Position along chromosome", y = "Number of Singletons", title = "Singleton density along nuclear chromosomes per joint calling condition")
nuc_snp_density_plot
pdf("snp_density_per_chrom_nuclear.pdf")
print(nuc_snp_density_plot)
dev.off()
#organelle
organelle_singletons <- filter(joined_singletons, CHROM == "LT635626" | CHROM == "LT635627")
#make sure only organelle chroms are in new df
#organelle_singletons_count <- count(organelle_singletons, CHROM)
#organelle_singletons_count
org_snp_density_plot <- ggplot(organelle_singletons) +
geom_histogram(aes(x=POS, fill=condition), binwidth = 30) +
facet_wrap( ~ CHROM, ncol = 1, scales = "free") +
labs(x = "Position along chromosome", y = "Number of singletons", title = "Singleton density along organelle genomes per joint calling condition")
org_snp_density_plot
pdf("snp_density_per_chrom_organelle.pdf")
print(org_snp_density_plot)
dev.off()
library(tidyverse)
setwd("/home/vgartner/wray-lab/joint-call/singletons/")
#original data files - masked regiosn not removed
#by_pop_singletons <- as.data.frame(read.csv("by-pop-chroms-snps-only.tsv", sep = "\t"))
#combined_singletons <- as.data.frame(read.csv("combined-chroms-snps-only.tsv", sep = "\t"))
#trimmed data files - telomeres & repetitive regions removed
by_pop_singletons <- as.data.frame(read.csv("trimmed-by-pop-chroms-snps-only.singletons.csv", sep = ","))
combined_singletons <- as.data.frame(read.csv("trimmed-combined-chroms-snps-only.singletons.csv", sep = ","))
names(by_pop_singletons)[5] <- "acc"
names(combined_singletons)[5] <- "acc"
#combined_singletons
ethiopia_acc <- c("ERR2678989", "ERR2678996", "ERR2678998", "ERR2679003", "ERR775189", "ERR775190", "ERR925409", "ERR925410", "ERR925431", "ERR925440")
cambodia_acc <- c("SRR2315729", "SRR2315958", "SRR2316038", "SRR2316105", "SRR2316531", "SRR2316875", "SRR6361608", "SRR6361755", "SRR6361801", "SRR6361805")
ethiopia_col <- rep(c("Ethiopia"), times = 10)
cambodia_col <- rep(c("Cambodia"), times = 10)
eth_df <- data.frame(ethiopia_acc, ethiopia_col)
names(eth_df)[1] <- "acc"
names(eth_df)[2] <- "location"
cam_df <- data.frame(cambodia_acc, cambodia_col)
names(cam_df)[1] <- "acc"
names(cam_df)[2] <- "location"
loc_df <- rbind(eth_df, cam_df)
#loc_df
bp_count <- nrow(by_pop_singletons)
c_count <- nrow(combined_singletons)
total_count <- data.frame(condition = c("by-population", "combined"), total = c(bp_count, c_count))
#total_count
total_count_plot <- ggplot(total_count, aes(x=factor(condition), y=total, fill=condition)) +
geom_bar(stat="identity") +
theme(legend.position = "none") +
geom_text(aes(label=total), position=position_dodge(width=0.9), check_overlap = TRUE, vjust = -.3, size = 4) +
labs(x = "Joint Calling Condition", y = "Number of singletons", title = "Number of singletons per condition")
total_count_plot
by_pop_sing_per_indv <- count(by_pop_singletons, acc)
# double check
#sum(by_pop_sing_per_indv$n) == nrow(by_pop_singletons)
names(by_pop_sing_per_indv)[1] <- "acc"
by_pop_sing_per_indv <- inner_join(by_pop_sing_per_indv, loc_df, by="acc")
#by_pop_sing_per_indv
#make sure n == total number of singletons
#sum(by_pop_sing_per_indv$n) #209190
bp_sing_indv_plot <- ggplot(as.data.frame(by_pop_sing_per_indv), aes(x=factor(acc), y=n, fill=location)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
labs(x = "Sample Accession", y = "Number of singletons", title = "Number of singletons per individual in 'By-Population' condition") +
scale_color_manual(values = colors, breaks = names(colors)[c(2,1)]) +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust = -.3, size = 3)
bp_sing_indv_plot
########
combined_sing_per_indv <- count(combined_singletons, acc)
# double check
#sum(combined_sing_per_indv$n) == nrow(combined_singletons)
combined_sing_per_indv <- inner_join(combined_sing_per_indv, loc_df, by="acc")
#combined_sing_per_indv
comb_sing_indv_plot <- ggplot(as.data.frame(combined_sing_per_indv), aes(x=factor(acc), y=n, fill=location)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
labs(x = "Sample Accession", y = "Number of singletons", title = "Number of singletons per individual in 'Combined' condition") +
scale_color_manual(values = colors, breaks = names(colors)[c(2,1)])+
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust = -.3, size = 3)
comb_sing_indv_plot
#pull out rows that come from the apicoplast
by_pop_api <- filter(by_pop_singletons, CHROM == "LT635626")
combined_api <- filter(combined_singletons, CHROM == "LT635626")
#by_pop_api
bp_api_count <- nrow(by_pop_api)
c_api_count <- nrow(combined_api)
api_total_count <- data.frame(condition = c("by-pop", "combined"), total = c(bp_api_count, c_api_count))
api_total_count_plot <- ggplot(api_total_count, aes(x=factor(condition), y=total, fill=condition)) +
geom_bar(stat="identity") +
theme(legend.position = "none") +
geom_text(aes(label=total), position=position_dodge(width=0.9), check_overlap = TRUE, vjust = -.3, size = 4) +
labs(x = "Joint Calling Condition", y = "Number of singletons", title = "Number of Apicoplast singletons per condition")
api_total_count_plot
setwd("/home/vgartner/wray-lab/joint-call/singletons/")
common_singletons <- inner_join(by_pop_singletons, combined_singletons, by=c("CHROM", "POS"))
#new dataframe with condition as a column
by_pop_singletons$condition = c(rep("By Population", length(nrow(by_pop_singletons))))
#by_pop_singletons
combined_singletons$condition = c(rep("Combined", length(nrow(combined_singletons))))
#combined_singletons
joined_singletons <- rbind(by_pop_singletons, combined_singletons)
# making sure I have what I want
#test <- joined_singletons %>% filter(condition == "Combined")
#test2 <- joined_singletons %>% filter(condition == "By Population")
#nrow(test) + nrow(test2) == nrow(joined_singletons)
# plot nuclear chroms separate from organelle (very diff bin widths needed)
#nuclear
nuclear_singletons <- filter(joined_singletons, CHROM != "LT635626" & CHROM != "LT635627")
#make sure only nuclear chroms are in new df
#nuclear_singletons_count <- count(nuclear_singletons, CHROM)
#nuclear_singletons_count
nuc_snp_density_plot <- ggplot(nuclear_singletons) +
geom_histogram(aes(x=POS, fill=condition), binwidth = 10000) +
facet_wrap( ~ CHROM, ncol = 2, scales = "free") +
labs(x = "Position along chromosome", y = "Number of Singletons", title = "Singleton density along nuclear chromosomes per joint calling condition")
nuc_snp_density_plot
pdf("snp_density_per_chrom_nuclear.pdf")
print(nuc_snp_density_plot)
dev.off()
#organelle
organelle_singletons <- filter(joined_singletons, CHROM == "LT635626" | CHROM == "LT635627")
#make sure only organelle chroms are in new df
#organelle_singletons_count <- count(organelle_singletons, CHROM)
#organelle_singletons_count
org_snp_density_plot <- ggplot(organelle_singletons) +
geom_histogram(aes(x=POS, fill=condition), binwidth = 30) +
facet_wrap( ~ CHROM, ncol = 1, scales = "free") +
labs(x = "Position along chromosome", y = "Number of singletons", title = "Singleton density along organelle genomes per joint calling condition")
org_snp_density_plot
pdf("snp_density_per_chrom_organelle.pdf")
print(org_snp_density_plot)
dev.off()
library(tidyverse)
setwd("/home/vgartner/wray-lab/joint-call/singletons/")
#original data files - masked regiosn not removed
#by_pop_singletons <- as.data.frame(read.csv("by-pop-chroms-snps-only.tsv", sep = "\t"))
#combined_singletons <- as.data.frame(read.csv("combined-chroms-snps-only.tsv", sep = "\t"))
#trimmed data files - telomeres & repetitive regions removed
by_pop_singletons <- as.data.frame(read.csv("trimmed-by-pop-chroms-snps-only.singletons.csv", sep = ","))
combined_singletons <- as.data.frame(read.csv("trimmed-combined-chroms-snps-only.singletons.csv", sep = ","))
names(by_pop_singletons)[5] <- "acc"
names(combined_singletons)[5] <- "acc"
#combined_singletons
ethiopia_acc <- c("ERR2678989", "ERR2678996", "ERR2678998", "ERR2679003", "ERR775189", "ERR775190", "ERR925409", "ERR925410", "ERR925431", "ERR925440")
cambodia_acc <- c("SRR2315729", "SRR2315958", "SRR2316038", "SRR2316105", "SRR2316531", "SRR2316875", "SRR6361608", "SRR6361755", "SRR6361801", "SRR6361805")
ethiopia_col <- rep(c("Ethiopia"), times = 10)
cambodia_col <- rep(c("Cambodia"), times = 10)
eth_df <- data.frame(ethiopia_acc, ethiopia_col)
names(eth_df)[1] <- "acc"
names(eth_df)[2] <- "location"
cam_df <- data.frame(cambodia_acc, cambodia_col)
names(cam_df)[1] <- "acc"
names(cam_df)[2] <- "location"
loc_df <- rbind(eth_df, cam_df)
#loc_df
bp_count <- nrow(by_pop_singletons)
c_count <- nrow(combined_singletons)
total_count <- data.frame(condition = c("by-population", "combined"), total = c(bp_count, c_count))
#total_count
total_count_plot <- ggplot(total_count, aes(x=factor(condition), y=total, fill=condition)) +
geom_bar(stat="identity") +
theme(legend.position = "none") +
geom_text(aes(label=total), position=position_dodge(width=0.9), check_overlap = TRUE, vjust = -.3, size = 4) +
labs(x = "Joint Calling Condition", y = "Number of singletons", title = "Number of singletons per condition")
total_count_plot
by_pop_sing_per_indv <- count(by_pop_singletons, acc)
# double check
#sum(by_pop_sing_per_indv$n) == nrow(by_pop_singletons)
names(by_pop_sing_per_indv)[1] <- "acc"
by_pop_sing_per_indv <- inner_join(by_pop_sing_per_indv, loc_df, by="acc")
#by_pop_sing_per_indv
#make sure n == total number of singletons
#sum(by_pop_sing_per_indv$n) #209190
bp_sing_indv_plot <- ggplot(as.data.frame(by_pop_sing_per_indv), aes(x=factor(acc), y=n, fill=location)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
labs(x = "Sample Accession", y = "Number of singletons", title = "Number of singletons per individual in 'By-Population' condition") +
scale_color_manual(values = colors, breaks = names(colors)[c(2,1)]) +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust = -.3, size = 3)
bp_sing_indv_plot
########
combined_sing_per_indv <- count(combined_singletons, acc)
# double check
#sum(combined_sing_per_indv$n) == nrow(combined_singletons)
combined_sing_per_indv <- inner_join(combined_sing_per_indv, loc_df, by="acc")
#combined_sing_per_indv
comb_sing_indv_plot <- ggplot(as.data.frame(combined_sing_per_indv), aes(x=factor(acc), y=n, fill=location)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
labs(x = "Sample Accession", y = "Number of singletons", title = "Number of singletons per individual in 'Combined' condition") +
scale_color_manual(values = colors, breaks = names(colors)[c(2,1)])+
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust = -.3, size = 3)
comb_sing_indv_plot
#pull out rows that come from the apicoplast
by_pop_api <- filter(by_pop_singletons, CHROM == "LT635626")
combined_api <- filter(combined_singletons, CHROM == "LT635626")
#by_pop_api
bp_api_count <- nrow(by_pop_api)
c_api_count <- nrow(combined_api)
api_total_count <- data.frame(condition = c("by-pop", "combined"), total = c(bp_api_count, c_api_count))
api_total_count_plot <- ggplot(api_total_count, aes(x=factor(condition), y=total, fill=condition)) +
geom_bar(stat="identity") +
theme(legend.position = "none") +
geom_text(aes(label=total), position=position_dodge(width=0.9), check_overlap = TRUE, vjust = -.3, size = 4) +
labs(x = "Joint Calling Condition", y = "Number of singletons", title = "Number of Apicoplast singletons per condition")
api_total_count_plot
setwd("/home/vgartner/wray-lab/joint-call/singletons/")
common_singletons <- inner_join(by_pop_singletons, combined_singletons, by=c("CHROM", "POS"))
#new dataframe with condition as a column
by_pop_singletons$condition = c(rep("By Population", length(nrow(by_pop_singletons))))
#by_pop_singletons
combined_singletons$condition = c(rep("Combined", length(nrow(combined_singletons))))
#combined_singletons
joined_singletons <- rbind(by_pop_singletons, combined_singletons)
# making sure I have what I want
#test <- joined_singletons %>% filter(condition == "Combined")
#test2 <- joined_singletons %>% filter(condition == "By Population")
#nrow(test) + nrow(test2) == nrow(joined_singletons)
# plot nuclear chroms separate from organelle (very diff bin widths needed)
#nuclear
nuclear_singletons <- filter(joined_singletons, CHROM != "LT635626" & CHROM != "LT635627")
#make sure only nuclear chroms are in new df
#nuclear_singletons_count <- count(nuclear_singletons, CHROM)
#nuclear_singletons_count
nuc_snp_density_plot <- ggplot(nuclear_singletons) +
geom_histogram(aes(x=POS, fill=condition), binwidth = 10000) +
facet_wrap( ~ CHROM, ncol = 2, scales = "free") +
labs(x = "Position along chromosome", y = "Number of Singletons", title = "Singleton density along nuclear chromosomes per joint calling condition")
nuc_snp_density_plot
pdf("snp_density_per_chrom_nuclear.pdf")
print(nuc_snp_density_plot)
dev.off()
#organelle
organelle_singletons <- filter(joined_singletons, CHROM == "LT635626" | CHROM == "LT635627")
#make sure only organelle chroms are in new df
#organelle_singletons_count <- count(organelle_singletons, CHROM)
#organelle_singletons_count
org_snp_density_plot <- ggplot(organelle_singletons) +
geom_histogram(aes(x=POS, fill=condition), binwidth = 30) +
facet_wrap( ~ CHROM, ncol = 1, scales = "free") +
labs(x = "Position along chromosome", y = "Number of singletons", title = "Singleton density along organelle genomes per joint calling condition")
org_snp_density_plot
pdf("snp_density_per_chrom_organelle.pdf")
print(org_snp_density_plot)
dev.off()
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
library(dplyr)
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
summary(grouped_byregion)
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
summary(grouped_byregion, region)
?summary]
?summary
#all_data <- read.csv("Dropbox (Duke Bio_Ea)/coalescent/samples/sample_info.csv", header = TRUE)
#only cambodia samples
Cambodia <- filter(all_data, all_data$country == 'Cambodia')
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
summary(grouped_byregion)
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
as.matrix(summary(grouped_byregion))
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
as.matrix(summary(grouped_byregion))
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
write.csv(as.matrix(summary(grouped_byregion)), file=name.csv)
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
write.csv(as.matrix(summary(grouped_byregion)), file="name.csv")
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
grouped_byregion <- group_by(sample_table, region)
write.csv(as.matrix(summary(grouped_byregion)), file="name.csv")
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
seasia <- filter(sample_table, region == 'seasia')
seasia
samerica <- filter(sample_table, region == 'samerica')
#sasia <-    easia    europe   namerica africa
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
write.csv(africa$accession, "../../joint-call/africa_accessions.csv", row.names = FALSE)
easia <- filter(sample_table, region == 'easia')
europe <- filter(sample_table, region == 'europe')
namerica <- filter(sample_table, region == 'namerica')
samerica <- filter(sample_table, region == 'samerica')
sasia <- filter(sample_table, region == 'sasia') #India samples
seasia <- filter(sample_table, region == 'seasia')
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
write.csv(africa$accession, "../../joint-call/africa_accessions.csv", row.names = FALSE, header = FALSE)
?write.csv()
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
write.csv(africa$accession, "../../joint-call/africa_accessions.csv", row.names = FALSE, col.names = FALSE)
easia <- filter(sample_table, region == 'easia')
europe <- filter(sample_table, region == 'europe')
namerica <- filter(sample_table, region == 'namerica')
samerica <- filter(sample_table, region == 'samerica')
sasia <- filter(sample_table, region == 'sasia') #India samples
seasia <- filter(sample_table, region == 'seasia')
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
write.csv(africa$accession, "../../joint-call/africa_accessions.csv", row.names = FALSE, col.names = FALSE)
easia <- filter(sample_table, region == 'easia')
europe <- filter(sample_table, region == 'europe')
namerica <- filter(sample_table, region == 'namerica')
samerica <- filter(sample_table, region == 'samerica')
sasia <- filter(sample_table, region == 'sasia') #India samples
seasia <- filter(sample_table, region == 'seasia')
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
africa$accession
write.csv(africa$accession, "../../joint-call/africa_accessions.csv", row.names = FALSE, col.names = FALSE)
easia <- filter(sample_table, region == 'easia')
europe <- filter(sample_table, region == 'europe')
namerica <- filter(sample_table, region == 'namerica')
samerica <- filter(sample_table, region == 'samerica')
sasia <- filter(sample_table, region == 'sasia') #India samples
seasia <- filter(sample_table, region == 'seasia')
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
africa$accession
write.csv(africa$accession, "../../joint-call/africa_accessions.csv", row.names = FALSE, col.names = NA)
easia <- filter(sample_table, region == 'easia')
europe <- filter(sample_table, region == 'europe')
namerica <- filter(sample_table, region == 'namerica')
samerica <- filter(sample_table, region == 'samerica')
sasia <- filter(sample_table, region == 'sasia') #India samples
seasia <- filter(sample_table, region == 'seasia')
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
#unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
write.csv(africa$accession, "../../joint-call/africa-accessions.txt", row.names = FALSE, col.names = NA)
easia <- filter(sample_table, region == 'easia')
write.csv(easia$accession, "../../joint-call/easia-accessions.txt", row.names = FALSE, col.names = NA)
europe <- filter(sample_table, region == 'europe')
write.csv(europe$accession, "../../joint-call/europe-accessions.txt", row.names = FALSE, col.names = NA)
namerica <- filter(sample_table, region == 'namerica')
write.csv(namerica$accession, "../../joint-call/namerica-accessions.txt", row.names = FALSE, col.names = NA)
samerica <- filter(sample_table, region == 'samerica')
write.csv(samerica$accession, "../../joint-call/samerica-accessions.txt", row.names = FALSE, col.names = NA)
sasia <- filter(sample_table, region == 'sasia') #India samples
write.csv(sasia$accession, "../../joint-call/sasia-accessions.txt", row.names = FALSE, col.names = NA)
seasia <- filter(sample_table, region == 'seasia')
write.csv(seasia$accession, "../../joint-call/seasia-accessions.txt", row.names = FALSE, col.names = NA)
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
#unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
write.csv(africa$accession, "../../joint-call/africa-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
easia <- filter(sample_table, region == 'easia')
write.csv(easia$accession, "../../joint-call/easia-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
europe <- filter(sample_table, region == 'europe')
write.csv(europe$accession, "../../joint-call/europe-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
namerica <- filter(sample_table, region == 'namerica')
write.csv(namerica$accession, "../../joint-call/namerica-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
samerica <- filter(sample_table, region == 'samerica')
write.csv(samerica$accession, "../../joint-call/samerica-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
sasia <- filter(sample_table, region == 'sasia') #India samples
write.csv(sasia$accession, "../../joint-call/sasia-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
seasia <- filter(sample_table, region == 'seasia')
write.csv(seasia$accession, "../../joint-call/seasia-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
sample_table <- read.csv("../../coalescent/samples/tables/merged-sample-table-noduplicates.csv")
#unique((sample_table$region))
#seasia   samerica sasia    easia    europe   namerica africa
africa <- filter (sample_table, region == 'africa')
write.csv(africa$accession, "../../joint-call/africa-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
easia <- filter(sample_table, region == 'easia')
write.csv(easia$accession, "../../joint-call/easia-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
europe <- filter(sample_table, region == 'europe')
write.csv(europe$accession, "../../joint-call/europe-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
namerica <- filter(sample_table, region == 'namerica')
write.csv(namerica$accession, "../../joint-call/namerica-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
samerica <- filter(sample_table, region == 'samerica')
write.csv(samerica$accession, "../../joint-call/samerica-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
sasia <- filter(sample_table, region == 'sasia') #India samples
write.csv(sasia$accession, "../../joint-call/sasia-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
seasia <- filter(sample_table, region == 'seasia')
write.csv(seasia$accession, "../../joint-call/seasia-accessions.txt", row.names = FALSE, col.names = NA, quote = FALSE)
