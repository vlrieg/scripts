library(dplyr)
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
sample_table
suppressMessages(library(dplyr))
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
sample_table[duplicated(sample_table$accession),]
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
sample_table
sample_table[duplicated(sample_table$accession),]
?write.table
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups[!is.na(dups$sample_ID),]
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups[!is.na(dups$sample_ID),]
samp_ID
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
suppressMessages(library(dplyr))
suppressMessages(library(tidyverse))
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
sampe_ID <- dups %>% drop_na(dups$sample_ID)
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
dups <- as.data.frame(dups)
sampe_ID <- dups %>% drop_na(dups$sample_ID)
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv'))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
#dups <- as.data.frame(dups)
sampe_ID <- dups %>% drop_na(sample_ID)
samp_ID
#dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
sampe_ID <- dups %>% drop_na(sample_ID)
samp_ID
#dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
sampe_ID <- dups %>% drop_na(sample_ID)
samp_ID
#dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
sampe_ID <- dups %>% drop_na(sample_ID)
samp_ID
#dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", " ", "NA")))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
sampe_ID <- dups %>% drop_na(sample_ID)
samp_ID
#dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", " ", "NA")))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
samp_ID <- dups %>% drop_na(sample_ID)
samp_ID
#dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
#samp_ID <- dups[!is.na(dups$sample_ID),]
samp_ID <- dups %>% drop_na(sample_ID)
samp_ID
#dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
#samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
dup_sampID
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
dup_sampID
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
#write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
#samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID #no duplicates
smpdups <- sample_table[duplicated(sample_table$sample_ID)]
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
#write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
#samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID #no duplicates
smpdups <- sample_table[duplicated(sample_table$sample_ID),]
smpdups
smpdups <- sample_table[duplicated(sample_table$sample_ID),] %>% drop_na(sample_ID)
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
#write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
#samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID #no duplicates
smpdups <- sample_table[duplicated(sample_table$sample_ID),] %>% drop_na(sample_ID)
smpdups
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
#samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID #no duplicates
smpdups <- sample_table[duplicated(sample_table$sample_ID),] %>% drop_na(sample_ID)
smpdups
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
#samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID #no duplicates
smpdups <- sample_table[duplicated(sample_table$sample_ID),] %>% drop_na(sample_ID)
smpdups
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
#write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#pull out only samples with a sample ID
samp_ID <- dups %>% drop_na(sample_ID)
#samp_ID
#duplicate accession numbers
dup_sampID <- samp_ID[duplicated(samp_ID$sample_ID),]
#dup_sampID #no duplicates
smpdups <- sample_table[duplicated(sample_table$sample_ID),] %>% drop_na(sample_ID)
smpdups
install.packages(stringr, dependencies = TRUE)
install.packages("stringr", dependencies = TRUE)
install.packages("stringr")
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
library(stringr)
?str_split_fixed
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
library(stringr)
test <- str_split_fixed(samp_ID$accession, "ER.", 2)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
library(stringr)
test <- str_split_fixed(samp_ID$accession, "ER.", 2)
test
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
library(stringr)
samp_acc <- samp_ID$accession
test <- str_split_fixed(samp_acc, "ER.", 2)
test
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
library(stringr)
samp_acc <- samp_ID$accession
test <- str_split_fixed(samp_acc, "ER*", 2)
test
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
library(stringr)
samp_acc <- samp_ID$accession
test <- str_split_fixed(samp_acc, "ER.[0-9]", 2)
test
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- samp_ID$accession
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(samp_acc, "sample_ID_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- data.frame(c(samp_ID$accession, samp_ID$sample_ID))
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(samp_acc, "sample_ID_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
samp_acc
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
#write.table(samp_acc, "sample_ID_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(samp_acc, "sample_ID_accessions.csv", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
duped_sampID <- select(sample_table$sample_ID == samp_acc$sample_ID)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
duped_sampID <- filter(sample_table, samp_ID %in% samp_acc)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
duped_sampID <- filter(sample_table, samp_acc %in% samp_ID)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
duped_sampID <- sample_table[sample_table$sample_ID %in% samp_acc$sample_ID]
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
#duped_sampID <- sample_table[sample_table$sample_ID %in% samp_acc$sample_ID]
duped_sampID <- filter(sample_table, samp_ID %in% samp_acc$sample_ID)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
#duped_sampID <- sample_table[sample_table$sample_ID %in% samp_acc$sample_ID]
duped_sampID <- filter(sample_table, sample_ID %in% samp_acc$sample_ID)
duped_sampID
#https://stackoverflow.com/questions/11612235/select-rows-from-a-data-frame-based-on-values-in-a-vector
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(samp_acc, "sample_ID_accessions.csv", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
#duped_sampID <- sample_table[sample_table$sample_ID %in% samp_acc$sample_ID]
duped_sampID <- filter(sample_table, sample_ID %in% samp_acc$sample_ID)
duped_sampID
#https://stackoverflow.com/questions/11612235/select-rows-from-a-data-frame-based-on-values-in-a-vector
# "try: dt[dt$fct %in% vc,] Basically == is for one item and %in% is for a vector comparison."
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(duped_sampID, "sample_ID_accessions.csv", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
#duped_sampID <- sample_table[sample_table$sample_ID %in% samp_acc$sample_ID]
duped_sampID <- filter(sample_table, sample_ID %in% samp_acc$sample_ID)
duped_sampID
#https://stackoverflow.com/questions/11612235/select-rows-from-a-data-frame-based-on-values-in-a-vector
# "try: dt[dt$fct %in% vc,] Basically == is for one item and %in% is for a vector comparison."
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(duped_sampID, "sample_ID_accessions.csv", sep=",",col.names=FALSE,row.names=FALSE,quote=FALSE)
#split samp_Id into two dataframes - one with only ERS and the other withonly ERR
#library(stringr)
#couldn't figure out how to do this in R. gonna export and do in python.
samp_acc <- select(samp_ID, "accession", "sample_ID")
#samp_acc
#use sample_IDs as the key to pull out all rows that match the sample ID
#duped_sampID <- sample_table[sample_table$sample_ID %in% samp_acc$sample_ID]
duped_sampID <- filter(sample_table, sample_ID %in% samp_acc$sample_ID)
duped_sampID <- select(duped_sampID, "accession", "sample_ID")
#https://stackoverflow.com/questions/11612235/select-rows-from-a-data-frame-based-on-values-in-a-vector
# "try: dt[dt$fct %in% vc,] Basically == is for one item and %in% is for a vector comparison."
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
write.table(duped_sampID, "sample_ID_accessions.csv", sep=",",col.names=FALSE,row.names=FALSE,quote=FALSE)
ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
?select
sample_table <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/merged-sample-table.csv', na.strings=c("", "NA")))
#full table
#sample_table
#duplicate accession numbers
dups <- sample_table[duplicated(sample_table$accession),]
dups
setwd('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/')
#write.table(dups, "duplicate_accessions.txt", sep=",",col.names=TRUE,row.names=FALSE,quote=FALSE)
ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
final_table <- filter(sample_table, accession !%in% ers_to_delete$x)
final_table <- filter(sample_table, accession %in% ers_to_delete$x)
ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
final_table <- filter(sample_table, accession %in% ers_to_delete$)
ers_to_delete <- as.data.frame(read.csv('~/Dropbox (Duke Bio_Ea)/coalescent/samples/tables/ERS-to-delete.txt'))
ers_to_delete
final_table <- filter(sample_table, accession %in% ers_to_delete)
final_table
#also remove using dups (generated above)
